import os
import ccxt
import pandas as pd
import requests
import time

# ðŸ”‘ Environment Variables (Railway me set karna)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# Binance API setup (no key needed for public data)
exchange = ccxt.binance()

# Symbols jo track karne hain
symbols = {
    "BTC/USDT": "Bitcoin",
    "ETH/USDT": "Ethereum",
    "XAU/USDT": "Gold",
    "USOIL/USDT": "US Oil"
}

# EMA calculation function
def get_signal(symbol):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe="15m", limit=100)
        df = pd.DataFrame(ohlcv, columns=["time","open","high","low","close","volume"])
        df["ema9"] = df["close"].ewm(span=9).mean()
        df["ema30"] = df["close"].ewm(span=30).mean()

        if df["ema9"].iloc[-2] < df["ema30"].iloc[-2] and df["ema9"].iloc[-1] > df["ema30"].iloc[-1]:
            return "BUY"
        elif df["ema9"].iloc[-2] > df["ema30"].iloc[-2] and df["ema9"].iloc[-1] < df["ema30"].iloc[-1]:
            return "SELL"
        else:
            return None
    except Exception as e:
        print(f"Error fetching {symbol}: {e}")
        return None

# Telegram alert function
def send_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print("Telegram error:", e)

# Main loop
def main():
    send_telegram("ðŸš€ EMA Bot Started... Tracking BTC, ETH, Gold, Oil.")
    while True:
        for symbol, name in symbols.items():
            signal = get_signal(symbol)
            if signal:
                msg = f"{name} ({symbol}) â†’ ðŸ“Š EMA Crossover Signal: {signal}"
                print(msg)
                send_telegram(msg)
        time.sleep(60)  # check every 1 minute

if __name__ == "__main__":
    main()